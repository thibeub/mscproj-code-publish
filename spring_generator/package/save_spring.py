# T. Atkins, 2024
# import numpy as np
import pandas as pd
from string import digits
from typing import Sequence


def save_spring(
    out_file: str,
    tracker_file: str,
    param_df: pd.DataFrame,
    phalange_lst: Sequence[str],
    alpha_lst: Sequence[int],
    d_lst: Sequence[int],
    t_lst: Sequence[float],
    preload: int,
    batch_code: str,
    save_fingers: Sequence[str],
) -> None:
    """
    FUNCTION
    > Save springs generated by other functions in the 'pacakge' directory
    > The process of "generating" and "saving" a spring relies fundamentally on two CSV files: the 'parameter' file and the 'tracker' file
    > The parameter file contains the pin spacing (d), alpha and thickness values for a given spring, and is in a format that can be read automatically by Autodesk Inventor CAD (as a result, it is not particularly human-readable)
    > The tracker file stores the parameters of the generated spring in a more human-readable format, allowing for easy lookup when writing test reports etc.
    > NB-1: The parameter file also contains the (fixed) measurements of the user's hand (e.g. range-of-motion (ROM) and pin spacing at max. ROM without preload)
    > NB-2: This process, or 'pipeline', for spring generation is explained in more detail in the report itself
    """

    ALPHA_PREFIX = "a"
    D_PREFIX = "d"
    T_PREFIX = "t"

    # Generate a unique ID for the new spring by searching for the most recent existing ID in the parameter file
    tail = param_df.tail(1).iloc[0, 0]
    numeric_tail = "".join(c for c in tail if c in digits)
    letter_tail = "".join(i for i in tail if not i.isdigit())
    if numeric_tail == "" or letter_tail not in [ALPHA_PREFIX, D_PREFIX, T_PREFIX]:
        id_int = 1
    else:
        id_int = int(numeric_tail) + 1

    param_df_out_lst = []
    tracker_df_out_lst = []
    for phalange, alpha, d, t in zip(phalange_lst, alpha_lst, d_lst, t_lst):
        current_finger = "".join(i for i in phalange if not i.isdigit())
        if current_finger in save_fingers:
            id_str = str(id_int).zfill(3)

            # With regards to the tracking file, generate the spring code (the structure of this code is detailed in the report and details all characteristics of the spring)
            param_df_out_lst.append(
                [D_PREFIX + id_str, d, "mm"],
            )
            param_df_out_lst.append(
                [ALPHA_PREFIX + id_str, alpha, "deg"],
            )
            param_df_out_lst.append([T_PREFIX + id_str, t, "mm"])

            # With regards to tracking, generate the spring code
            code_str = f"T(hP)-{phalange}-{str(alpha).zfill(3)}.{str(int(t*10)).zfill(2)}.{str(preload).zfill(2)}"
            tracker_df_out_lst.append([id_str, code_str, batch_code])

            # Debugging/confirmation readout
            print(f"Specification for spring {id_str}")
            print(f"d: {d} mm, alpha: {alpha} deg, t: {t} mm (preload: {preload}%)")
            print(f"Code: {code_str}")
            print("---")

            id_int += 1
        else:
            pass
    param_df_out = pd.DataFrame(param_df_out_lst)
    tracker_df_out = pd.DataFrame(tracker_df_out_lst)

    # Save spring parameters and spring code (tracking) in the relevant CSVs
    save = input(
        f"Are you sure that you want to save the above springs under {batch_code} (y/n)?: "
    )
    if save == "y":
        param_df_out.to_csv(out_file, index=False, header=False, mode="a")
        tracker_df_out.to_csv(tracker_file, index=False, header=False, mode="a")
        print("Saved: True")
    else:
        print("Saved: False")


if __name__ == "__main__":
    save_spring()
