# T. Atkins, 2024
import numpy as np
from typing import Sequence


def thickness_binning(data: list, outcome: Sequence[float]) -> Sequence[float]:
    """
    FUNCTION
    > Determine the thickness to use based on binning logic
    > The implementation below creates 3 bins (based on the (biased) assertion that the available thickness are limited - see discussion in the report)
    > Assuming that (given trial-and-error investigation) the central thickness captures most cases, the central bin is wider than the two others
    > The input data is then "digitised" and consequently assigned to a bin based on each input data point's statistical relation to the dataset
    > For example, an alpha value that is greater than 1 standard deviation from the dataset mean is assigned to an extreme bin, not the central one
    > This binning logic is entirely predicated on the assumption that a central thickness value covers most cases and that thickness must be incremented by relatively large extrusion width of the 3D printer's nozzle, a thought process which is discussed in detail in the report
    > This function can either bin based on alpha or pin spacing (d) - a tiebreak policy (not implemented in this function) then selects between the thicknesses generated by both binning approaches to retrieve a final value
    """
    mu = np.mean(data)
    std = np.std(data)

    # Generate 3 bins, with one larger central bin to capture most cases
    bins = np.array([mu - 2 * std, mu - std, mu + std, mu + 2 * std])

    # Compute bin assignments
    assignments = np.digitize(data, bins=bins)
    # Assign outliers (either above or below the bin extremities) to the nearest bin
    assignments[assignments == 0] = 1
    assignments[assignments == bins.shape[0]] = bins.shape[0] - 1

    # Return assignments
    thickness_out = []
    for idx, a in enumerate(assignments):
        thickness_out.append(outcome[a - 1])
        # print(f"{data[idx]:.3f} -> {outcome[a - 1]} mm.")
    return thickness_out


if __name__ == "__main__":
    thickness_binning()
