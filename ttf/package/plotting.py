# T. Atkins, 2024
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

plt.rc("text", usetex=True)
font_properties = {"family": "serif"}
plt.rc("font", **font_properties)


def _import(
    loc: str,
    mode: str,
) -> pd.DataFrame:
    """
    FUNCTION
    > Import the requisite data for use in plotting()
    """
    # Input checks
    mode = mode.upper()
    if mode not in ["LOW", "MID", "HIGH", "VHIGH"]:
        exit(
            f"ERROR: Test mode '{mode}' not recognised: must be 'LOW', 'MID', 'HIGH' or 'VHIGH' (not case sensitive)."
        )

    # Setup
    LOAD_STR = "load"

    # Import test data
    file = f"{loc}\\\\ttf{mode}.csv"
    df = pd.read_csv(
        file,
        names=[LOAD_STR],
        usecols=[0],
        dtype={LOAD_STR: float},
    )
    # Convert load from kilograms to Newtons
    df[LOAD_STR] = df[LOAD_STR].apply(lambda x: x * 9.81)

    return df


def _handlenodata(data: list) -> list:
    """
    FUNCTION
    > Handle outliers in the case where the rig spacing is too large to ft between the finger and the palm (in this case, the CSV has been manually updated with an erroneous value of '1000')
    """
    for idx, val in enumerate(data):
        if val > 1000:
            data[idx] = 0.0
    return data


def _gettxt(bars: plt.bar) -> None:
    """
    FUNCTION
    > Add text on top of the bars generated by plotting()
    """
    for rect in bars:
        # Retrieve the heights of the bars (i.e. the y-values)
        height = rect.get_height()
        if height == 0.0:
            txt = "ND"  # in the case(s) where the rig spacing is too large to fit between the finger and the palm
        else:
            txt = f"{height:.1f}"

        # Generate the text
        plt.text(
            rect.get_x() + rect.get_width() / 2.0,
            height,
            txt,
            ha="center",
            va="bottom",
        )

    return None


def plotting(save: bool = False) -> None:
    """
    FUNCTION
    > Plot pinch force load for each finger in a bar chart, comparing force for the 'LOW', 'MID' and 'HIGH' T-TF rig spacings
    """
    # Setup
    LOC = "[INSERT PATH TO DIRECTORY OF INPUT DATA HERE]"

    # Data import
    df_low = _import(LOC, "LOW")
    low_vals = _handlenodata(df_low["load"].to_list())

    df_mid = _import(LOC, "MID")
    mid_vals = _handlenodata(df_mid["load"].to_list())

    df_high = _import(LOC, "HIGH")
    high_vals = _handlenodata(df_high["load"].to_list())

    df_vhigh = _import(LOC, "VHIGH")
    vhigh_vals = _handlenodata(df_vhigh["load"].to_list())

    # Bar chart setup
    n = len(low_vals)
    x = np.arange(n)
    WIDTH = 0.2
    fig, ax = plt.subplots()

    # Generate bars
    bar_low = ax.bar(
        x - 1.5 * WIDTH,
        low_vals,
        WIDTH,
        label="Low gap (35.0 mm)",
        color="magenta",
        edgecolor="black",
    )
    bar_mid = ax.bar(
        x - 0.5 * WIDTH,
        mid_vals,
        WIDTH,
        label="Mid gap (42.5 mm)",
        color="cyan",
        edgecolor="black",
    )
    bar_high = ax.bar(
        x + 0.5 * WIDTH,
        high_vals,
        WIDTH,
        label="High gap (50.0 mm)",
        color="orange",
        edgecolor="black",
    )
    bar_vhigh = ax.bar(
        x + 1.5 * WIDTH,
        vhigh_vals,
        WIDTH,
        label="V. high gap (60.0 mm)",
        color="green",
        edgecolor="black",
    )

    # Add text
    _gettxt(bar_low)
    _gettxt(bar_mid)
    _gettxt(bar_high)
    _gettxt(bar_vhigh)

    # Format axes
    ax.set_ylabel(r"Load [N]", fontsize=12)
    ax.set_xticks(x)
    ax.set_xticklabels(["Index", "Middle", "Ring", "Little"], fontsize=12)
    ax.legend(loc="upper left")
    ax.set_box_aspect(1)  # square aspect ratio

    # Save plot
    if save:
        SAVE_LOC1 = "[INSERT PATH TO A SAVE DIRECTORY HERE]"
        SAVE_LOC2 = "[INSERT PATH TO ANOTHER SAVE DIRECTORY HERE]"
        FNAME = f"ttf"
        FTYPE = "pdf"
        fig.savefig(f"{SAVE_LOC1}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        fig.savefig(f"{SAVE_LOC2}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        print(f"Figure {FNAME}.{FTYPE} saved.")
    else:
        plt.show()

    return None


if __name__ == "__main__":
    plotting()
