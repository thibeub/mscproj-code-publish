# T. Atkins, 2024
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from typing import Sequence, Tuple

plt.rc("text", usetex=True)
font_properties = {"family": "serif"}
# font_properties = {"family": "sans-serif", "sans-serif": ["Helvetica"]}
plt.rc("font", **font_properties)


def _stdimport(
    loc: str,
    test_code: str,
    test_nums: Sequence[int],
) -> dict:
    """
    FUNCTION
    > Import the requisite data for use in plotting_standard()
    """
    # Setup
    LOAD_STR = "load"
    COMP_STR = "comp"
    df_dct = {}

    # Import test data
    for n in test_nums:
        file = f"{loc}\\\\test{test_code}_{str(n).zfill(3)}.csv"
        df = pd.read_csv(
            file,
            names=[LOAD_STR, COMP_STR],
            usecols=[0, 1],
            dtype={LOAD_STR: float, COMP_STR: float},
        )
        # Convert load from kilograms to Newtons
        df[LOAD_STR] = df[LOAD_STR].apply(lambda x: x * 9.81)
        df_dct[n] = df

    return df_dct


def _stdsetup(test_code: str, mode: str) -> Tuple[str, Sequence[str], Sequence[int]]:
    """
    FUNCTION
    > Return the requisite constants for use in both plotting_standard() and plotting_fatigue()
    > 'mode' indicates whether it is loads or pin spacings that are being compared
    """
    if mode == "std":
        legend_long = True
    elif mode == "ftg":
        legend_long = False
    else:
        exit(f"ERROR: Mode '{mode}' not recognised.")
    match test_code:
        case "A":
            TITLE = r"Test A: $t$ variation"
            if legend_long:
                GROUPS = [
                    r"$t=1.2$ mm $(-25\%)$",
                    r"$t=1.6$ mm $({\pm}0\%)$",
                    r"$t=2.0$ mm $(+25\%)$",
                ]
            else:
                GROUPS = [
                    r"$t=1.2$ mm",
                    r"$t=1.6$ mm",
                    r"$t=2.0$ mm",
                ]
            TEST_NUMS = [23, 24, 25]
        case "B":
            TITLE = r"Test B: $\alpha$ variation"
            if legend_long:
                GROUPS = [
                    r"$\alpha=60^\circ (-25\%)$",
                    r"$\alpha=80^\circ ({\pm}0\%)$",
                    r"$\alpha=100^\circ (+$25$\%)$",
                ]
            else:
                GROUPS = [
                    r"$\alpha=60^\circ$",
                    r"$\alpha=80^\circ$",
                    r"$\alpha=100^\circ$",
                ]
            TEST_NUMS = [26, 27, 28]
        case "C":
            TITLE = r"Test C: $d$ variation"
            if legend_long:
                GROUPS = [
                    r"$d=41.16$ mm $({\pm}0\%)$",
                    r"$d=45.28$ mm $(+10\%)$",
                    r"$d=53.51$ mm $(+30\%)$",
                ]
            else:
                GROUPS = [
                    r"$d=41.16$ mm",
                    r"$d=45.28$ mm",
                    r"$d=53.51$ mm",
                ]
            TEST_NUMS = [29, 30, 31]
        case _:
            exit(
                f"ERROR: Test code '{test_code}' not recognised: must be 'A', 'B' or 'C' (not case-sensitive)."
            )

    return TITLE, GROUPS, TEST_NUMS


def _ftgsetup(mode: str) -> Tuple[str, str]:
    """
    FUNCTION
    > Return the requisite fatigue-specific constants for the plotting of fatigue outcomes using bar charts with plotting_fatigue()
    > 'mode' indicates whether it is loads or pin spacings that are being compared
    """
    match mode:
        case "load":
            FILE = "[INSERT PATH TO DIRECTORY OF INPUT DATA (LOADS) HERE]"
            YLABEL = r"Load at 50$\%$ compression [N]"
        case "len":
            FILE = "[INSERT PATH TO DIRECTORY OF INPUT DATA (PIN SPACINGS) HERE]"
            YLABEL = r"Pin spacing $d$ at rest [mm]"
        case _:
            exit(f"ERROR: Plotting mode '{mode}' not recognised.")

    return FILE, YLABEL


def _getpct(bar_pre: plt.bar, bar_post: plt.bar) -> None:
    """
    FUNCTION
    > Adds percentages at the top of the bar charts generated by plotting_fatigue()
    """
    for rect_pre, rect_post in zip(bar_pre, bar_post):
        # Retrieve the heights of the bars (i.e. the y-values)
        height_pre = rect_pre.get_height()
        height_post = rect_post.get_height()
        # Compute the percentage change
        pct = 100 * (height_post - height_pre) / height_pre

        # Determine the tallest bar so that the text is displayed clearly without overlapping
        if height_pre >= height_post:
            rect = rect_pre
            height = height_pre
        else:
            rect = rect_post
            height = height_post

        # Generate the text
        plt.text(
            rect.get_x() + rect.get_width() / 2.0,
            height,
            rf"{pct:+.1f}$\%$",
            ha="center",
            va="bottom",
        )

    return None


def plotting_standard(test_code: str, save: bool = False) -> None:
    """
    FUNCTION
    > Plot load against percentage (wrt original length) compression given static compressive test data
    """
    # Setup
    LOC = "[INSERT PATH TO DIRECTORY OF INPUT DATA (LOADS) HERE]"
    TITLE, GROUPS, TEST_NUMS = _stdsetup(test_code, "std")

    # Data import
    dfs_petg = _stdimport(LOC, test_code, TEST_NUMS)
    dfs_pla = _stdimport(LOC, f"{test_code}p", TEST_NUMS)

    # Plot
    PETG_FMTS = [".k-", ".b-", ".r-"]
    PLA_FMTS = [".k--", ".b--", ".r--"]
    if len(PETG_FMTS) != len(TEST_NUMS) and len(PLA_FMTS) != len(TEST_NUMS):
        raise Exception("Line formats not correctly specified.")

    for idx, n in enumerate(TEST_NUMS):
        plt.plot(dfs_petg[n].comp, dfs_petg[n].load, PETG_FMTS[idx], label=GROUPS[idx])
        plt.plot(dfs_pla[n].comp, dfs_pla[n].load, PLA_FMTS[idx])
    plt.legend(loc="upper left")
    plt.xlabel(r"Percentage compression [$\%$]", fontsize=12)
    plt.ylabel("Load [N]", fontsize=12)
    plt.gca().set_box_aspect(1)  # square aspect ratio
    # plt.title(TITLE)
    # plt.show()

    if save:
        SAVE_LOC1 = "[INSERT PATH TO A SAVE DIRECTORY HERE]"
        SAVE_LOC2 = "[INSERT PATH TO ANOTHER SAVE DIRECTORY HERE]"
        FNAME = f"std{test_code}"
        FTYPE = "pdf"
        plt.savefig(f"{SAVE_LOC1}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        plt.savefig(f"{SAVE_LOC2}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        print(f"Figure {FNAME}.{FTYPE} saved.")
    else:
        plt.show()

    return None


def plotting_fatigue(mode: str, test_code: str, save: bool = False) -> None:
    """
    FUNCTION
    > Plot an overlayed bar chart to compare the load or pin spacings measured on PETG and PLA springs before and after 10 complete compression cycles
    > With regards to the load, what is measured is the load at 50% compression
    > Hatching of the bars indicates values after 10 cycles
    > Percentage change is displayed above the bars
    > 'mode' indicates whether it is loads or pin spacings that are being compared
    """
    # Setup
    TITLE, GROUPS, TEST_NUMS = _stdsetup(test_code, "ftg")
    FILE, YLABEL = _ftgsetup(mode)

    # Data import
    df = pd.read_csv(FILE)
    petg_pre = df["petg_pre"].loc[df["id"].isin(TEST_NUMS)].tolist()
    petg_post = df["petg_post"].loc[df["id"].isin(TEST_NUMS)].tolist()
    pla_pre = df["pla_pre"].loc[df["id"].isin(TEST_NUMS)].tolist()
    pla_post = df["pla_post"].loc[df["id"].isin(TEST_NUMS)].tolist()

    # Bar chart setup
    n = len(GROUPS)
    x = np.arange(n)
    WIDTH = 0.4
    fig, ax = plt.subplots()

    # Generate PETG bars
    bar_petg_pre = ax.bar(
        x - WIDTH / 2,
        petg_pre,
        WIDTH,
        label="PETG",
        color="blue",
        edgecolor="black",
    )
    bar_petg_post = ax.bar(
        x - WIDTH / 2,
        petg_post,
        WIDTH,
        # label="PETG - 10 cycles",
        facecolor="none",
        edgecolor="black",
        hatch="/",
    )

    # Generate PLA bars
    bar_pla_pre = ax.bar(
        x + WIDTH / 2,
        pla_pre,
        WIDTH,
        label="PLA",
        color="red",
        edgecolor="black",
    )
    bar_pla_post = ax.bar(
        x + WIDTH / 2,
        pla_post,
        WIDTH,
        # label="PLA - 10 cycles",
        facecolor="none",
        edgecolor="black",
        hatch="/",
    )

    # Add percentage text
    _getpct(bar_petg_pre, bar_petg_post)
    _getpct(bar_pla_pre, bar_pla_post)

    # Format axes
    ax.set_ylabel(YLABEL, fontsize=12)
    ax.set_xticks(x)
    ax.set_xticklabels(GROUPS, fontsize=12)
    # ax.set_title(TITLE)
    ax.legend(loc="lower right")
    ax.set_box_aspect(1)  # square aspect ratio
    # plt.show()

    # Save plot
    if save:
        SAVE_LOC1 = r"C:\\Users\\thiba\\OneDrive - University College London\\COMP0132 - MSCPROJ\\code\\tsf\\figures\\fatigue"
        SAVE_LOC2 = r"C:\\Users\\thiba\\OneDrive - University College London\\COMP0132 - MSCPROJ\\Deliverables\\(0132) MSc Report\\figures"
        FNAME = f"ftg{mode}{test_code}"
        FTYPE = "pdf"
        fig.savefig(f"{SAVE_LOC1}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        fig.savefig(f"{SAVE_LOC2}\\\\{FNAME}.{FTYPE}", bbox_inches="tight")
        print(f"Figure {FNAME}.{FTYPE} saved.")
    else:
        plt.show()


if __name__ == "__main__":
    plotting_standard()
